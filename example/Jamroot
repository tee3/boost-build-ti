path-constant root : .. ;

# @todo HACK - add tools to the Boost.Build path
{
  import modules ;

  local boost-build-path = [ modules.peek : BOOST_BUILD_PATH ] ;
  modules.poke : BOOST_BUILD_PATH : $(root) $(boost-build-path) ;
}

import os ;
import errors ;

if [ os.name ] = NT
{
  using tms320c2000 :  6.4.9  : $(HOME)/opt/ti/ti-cgt-c2000-6.4.9/bin/cl2000 ;
  using tms320c5400 :  4.2.0  : $(HOME)/opt/ti/ti-cgt-c5400-4.2.0/bin/cl500 ;
  using tms320c5500 :  4.4.1  : $(HOME)/opt/ti/ti-cgt-c5500-4.4.1/bin/cl55 ;
  using tms320c6000 :  7.4.16 : $(HOME)/opt/ti/ti-cgt-c6000-7.4.16/bin/cl6x ;
}
else if [ os.name ] = CYGWIN
{
  using tms320c2000 :  6.4.9  : $(HOME)/opt/ti/ti-cgt-c2000-6.4.9/bin/cl2000 ;
  using tms320c5400 :  4.2.0  : $(HOME)/opt/ti/ti-cgt-c5400-4.2.0/bin/cl500 ;
  using tms320c5500 :  4.4.1  : $(HOME)/opt/ti/ti-cgt-c5500-4.4.1/bin/cl55 ;
  using tms320c6000 :  7.4.16 : $(HOME)/opt/ti/ti-cgt-c6000-7.4.16/bin/cl6x ;
}
else if [ os.name ] = LINUX
{
  using tms320c2000 :  6.4.9  : $(HOME)/opt/ti/ti-cgt-c2000-6.4.9/bin/cl2000 ;
  using tms320c5400 :  4.2.0  : $(HOME)/opt/ti/ti-cgt-c5400-4.2.0/bin/cl500 ;
  using tms320c5500 :  4.4.1  : $(HOME)/opt/ti/ti-cgt-c5500-4.4.1/bin/cl55 ;
  using tms320c6000 :  7.4.16 : $(HOME)/opt/ti/ti-cgt-c6000-7.4.16/bin/cl6x ;
}
else if [ os.name ] = MACOSX
{
  using tms320c2000 :  6.4.9  : $(HOME)/opt/ti/ti-cgt-c2000-6.4.9/bin/cl2000 ;
#  using tms320c5400 :  4.2.0  : $(HOME)/opt/ti/ti-cgt-c5400-4.2.0/bin/cl500 ;
  using tms320c5500 :  4.4.2  : $(HOME)/opt/ti/ti-cgt-c5500-4.4.2/bin/cl55 ;
  using tms320c6000 :  7.4.16 : $(HOME)/opt/ti/ti-cgt-c6000-7.4.16/bin/cl6x ;
}

# loop over all desired configurations
local toolsets = ;
toolsets += tms320c2000-6.4.9 ;
if [ os.name ] != MACOSX
{
  toolsets += tms320c5400-4.2.0 ;
}
if [ os.name ] != MACOSX
{
  toolsets += tms320c5500-4.4.1 ;
}
else
{
  toolsets += tms320c5500-4.4.2 ;
}
toolsets += tms320c6000-7.4.16 ;

local instruction-sets = ;
instruction-sets += tms320c2000 ;
instruction-sets += tms320c2800 ;
if [ os.name ] != MACOSX
{
  instruction-sets += tms320c5400 ;
  instruction-sets += tms320c549 ;
}
instruction-sets += tms320c5509 ;
instruction-sets += tms320c5510 ;
instruction-sets += tms320c6000 ;
instruction-sets += tms320c6200 ;
# @todo causes ambiguity, needs figuring out
#instruction-sets += tms320c6400 ;

explicit liba ;
lib liba : a.cpp a.hpp ;
explicit libb ;
lib libb : b.c b.h ;
explicit libd ;
lib libd : d_tms320c2000.asm : <toolset>tms320c2000 : : <toolset>tms320c2000 ;
lib libd : d_tms320c5400.asm : <toolset>tms320c5400 : : <toolset>tms320c5400 ;
lib libd : d_tms320c5500.asm : <toolset>tms320c5500 : : <toolset>tms320c5500 ;
lib libd : d_tms320c6000.asm : <toolset>tms320c6000 : : <toolset>tms320c6000 ;

explicit pass ;
exe pass : pass.cpp liba libb libd ;

local bundles = ;
for local is in $(instruction-sets)
{
  # generate toolset and architecture from $(is)
  local a = ;
  if [ MATCH (^tms320c2.+) : $(is) ]
  {
    a = tms320c2000 ;
  }
  else if [ MATCH (^tms320c54.+) : $(is) ]
  {
    a = tms320c5400 ;
  }
  else if [ MATCH (^tms320c55.+) : $(is) ]
  {
    a = tms320c5500 ;
  }
  else if [ MATCH (^tms320c6.+) : $(is) ]
  {
    a = tms320c6000 ;
  }

  if ! $(a)
  {
    errors.error "error: instruction-set" $(is) "does not match any architectures" ;
  }

  for local t in $(toolsets)
  {
    if [ MATCH ($(a)) : $(t) ]
    {
      for local v in debug release
      {
        for local l in static # shared
        {
          for local eh in off on
          {
            for local r in off on
            {
              local b = pass-$(t)-$(v)-$(is)-$(l)-$(eh)-$(r) ;
              bundles += $(b) ;

              explicit $(b) ;
              alias $(b)
                : # sources
                  pass
                : # requirements
                  <toolset>$(t)
                  <architecture>$(a)
                  <instruction-set>$(is)
                  <variant>$(v)
                  <link>$(l)
                  <exception-handling>$(eh)
                  <rtti>$(r)
                ;
            }
          }
        }
      }
    }
  }
}

alias all
  : # sources
    $(bundles)
  ;
