# Boost.Build support for the Texas Instruments TMS320C2000 Code Generation
# Tools.
#
# @todo add automatic library and runtime selection
# @todo add linker command file library
# @todo deal with dynamic linking
# @todo deal with multi-threaded?

import property ;
import generators ;
import os ;
import type ;
import toolset ;
import testing ;
import errors ;
import feature ;
import path ;
import common ;
import errors ;

import tms320_common ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
  .debug-configuration = true ;
}

feature.extend toolset : tms320c2000 ;

feature.extend architecture :
  tms320c2000
  ;

feature.extend instruction-set :
  tms320c2000
  tms320c2800
  ;

# type.register H28 : h28 : H ;

# type.register S28 : s28 : ASM ;

# type.register O28 : o28 ;

# type.register A28 : a28 l28 ;

type.set-generated-target-suffix EXE : <toolset>tms320c2000 : out ;
type.set-generated-target-suffix OBJ : <toolset>tms320c2000 : obj ;
type.set-generated-target-suffix STATIC_LIB : <toolset>tms320c2000 : lib ;

generators.register-linker tms320c2000.link : OBJ STATIC_LIB : EXE : <toolset>tms320c2000 <target-os>baremetal ;
#generators.register-linker tms320c2000.link : OBJ O28 A28 STATIC_LIB : EXE : <toolset>tms320c2000 <architecture>tms320c2000 <instruction-set>tms320c2800 <target-os>baremetal ;

generators.register-archiver tms320c2000.archive : OBJ : STATIC_LIB : <toolset>tms320c2000 <target-os>baremetal ;
#generators.register-archiver tms320c2000.archive : OBJ O28 : STATIC_LIB : <toolset>tms320c2000 <architecture>tms320c2000 <instruction-set>tms320c2800 <target-os>baremetal ;

generators.register-c-compiler tms320c2000.compile.c++ : CPP : OBJ : <toolset>tms320c2000 <target-os>baremetal ;
generators.register-c-compiler tms320c2000.compile.c : C : OBJ : <toolset>tms320c2000 <target-os>baremetal ;
generators.register-c-compiler tms320c2000.compile.asm : ASM : OBJ : <toolset>tms320c2000 <target-os>baremetal ;

rule init ( version ? : command * : options * )
{
  # Check that the host operating system is supported.  If it is not,
  # continue without configuring so we can still build targets that do
  # not need this toolset.
  if [ os.name ] = NT || [ os.name ] = CYGWIN || [ os.name ] = LINUX || [ os.name ] = MACOSX
  {
    command = [ common.get-invocation-command tms320c2000 : cl2000 : $(command) ] ;

    if $(command)
    {
      local output-lines = [ SPLIT_BY_CHARACTERS [ SHELL "\"$(command)\"" ] : "\n" ] ;

      local detected-version-components = [ MATCH "([0-9]+\\.[0-9]+(\\.[0-9]+)?)" : $(output-lines[1]) ] ;
      local detected-version = $(detected-version-components[1]) ;

      if ! $(detected-version)
      {
        errors.user-error "tms320c2000: no version detected" ;
      }

      if $(version)
      {
        if $(detected-version) != $(version)
        {
          errors.user-error "tms320c2000: detected version (" $(detected-version) ") does not match desired (" $(version) ")" ;
        }
      }

      if $(detected-version)
      {
        version = $(detected-version) ;
      }
    }
    else
    {
      errors.user-error "tms320c2000: cl2000 not found at" $(command) ;
    }

    root = [ common.get-absolute-tool-path $(command[-1]) ] ;
    root = $(root:P) ;

    local condition = [ common.check-init-parameters tms320c2000 : version $(version) ] ;

    common.handle-options tms320c2000 : $(condition) : $(command) : $(options) ;

    #toolset.add-requirements <toolset>tms320c2000:<testing.launcher>"$(root[0])/bin/load2000.exe" ;
    toolset.add-requirements <toolset>tms320c2000:<testing.launcher>echo ;

    if $(.debug-configuration)
    {
      ECHO "tms320c2000: using compiler" $(version) "at" $(root) ;
    }

    toolset.flags tms320c2000 .bin $(condition) : $(root)/bin ;

    # Declare flags

    toolset.flags tms320c2000.link OPTIONS $(condition)/<strip>off : ;
    toolset.flags tms320c2000.link OPTIONS $(condition)/<strip>on : -s ;

    toolset.flags tms320c2000.compile OPTIONS $(condition)/<debug-symbols>off : ;
    toolset.flags tms320c2000.compile OPTIONS $(condition)/<debug-symbols>on : -g ;

    toolset.flags tms320c2000.compile OPTIONS $(condition)/<optimization>off : ;
    toolset.flags tms320c2000.compile OPTIONS $(condition)/<optimization>speed : -O3 ;
    toolset.flags tms320c2000.compile OPTIONS $(condition)/<optimization>space : -ms=3 ;

    # @todo fill in completely
    # toolset.flags tms320c2000.compile OPTIONS $(condition)/<profiling>off : ;
    # toolset.flags tms320c2000.compile OPTIONS $(condition)/<profiling>on : ;

    toolset.flags tms320c2000.compile OPTIONS $(condition)/<inlining>off : -pi ;
    toolset.flags tms320c2000.compile OPTIONS $(condition)/<inlining>on : ;
    toolset.flags tms320c2000.compile OPTIONS $(condition)/<inlining>full : ;

    toolset.flags tms320c2000.compile.c++ OPTIONS $(condition)/<rtti>off : ;
    toolset.flags tms320c2000.compile.c++ OPTIONS $(condition)/<rtti>on : -rtti ;

    toolset.flags tms320c2000.compile.c++ OPTIONS $(condition)/<exception-handling>off : ;
    toolset.flags tms320c2000.compile.c++ OPTIONS $(condition)/<exception-handling>on : --exceptions ;

    toolset.flags tms320c2000.compile OPTIONS $(condition)/<warnings>off : -pdw ;
    toolset.flags tms320c2000.compile OPTIONS $(condition)/<warnings>all : ;

    toolset.flags tms320c2000.compile OPTIONS $(condition)/<warnings-as-errors>off : ;
    toolset.flags tms320c2000.compile OPTIONS $(condition)/<warnings-as-errors>on : -pdew ;

    toolset.flags tms320c2000.link OPTIONS $(condition) : <linkflags> ;
    toolset.flags tms320c2000.archive AROPTIONS $(condition) : <archiveflags> ;
    toolset.flags tms320c2000.compile OPTIONS $(condition) : <compileflags> ;

    toolset.flags tms320c2000.compile.c OPTIONS $(condition) : <cflags> ;
    toolset.flags tms320c2000.compile.c++ OPTIONS $(condition) : <cxxflags> ;
    toolset.flags tms320c2000.compile.asm OPTIONS $(condition) : <asmflags> ;
    toolset.flags tms320c2000.compile STDHDRS $(condition) : $(root)/include ;
    toolset.flags tms320c2000.compile DEFINES $(condition) : <define> ;
    toolset.flags tms320c2000.compile UNDEFINES $(condition) : <undef> ;
    toolset.flags tms320c2000.compile INCLUDES $(condition) : <include> ;

    # @todo endianess left at default for now.
    toolset.flags tms320c2000.link DEFAULTS $(condition) : -qq ;
    toolset.flags tms320c2000.compile.c DEFAULTS $(condition) : -qq ;
    toolset.flags tms320c2000.compile.c++ DEFAULTS $(condition) : -qq --static_template_instantiation ;
    toolset.flags tms320c2000.compile.asm DEFAULTS $(condition) : -qq ;

    toolset.flags tms320c2000.link DEFINES $(condition) : <define> ;
    toolset.flags tms320c2000.link UNDEFINES $(condition) : <undef> ;
    toolset.flags tms320c2000.link STDLIBPATH $(condition) : $(root)/lib ;
    toolset.flags tms320c2000.link LIBRARY_PATH $(condition) : <library-path> ;
    toolset.flags tms320c2000.link FINDLIBS_ST $(condition) : <find-static-library> ;
    toolset.flags tms320c2000.link FINDLIBS_SA $(condition) : <find-shared-library> ;
    toolset.flags tms320c2000.link LIBRARIES $(condition) : <library-file> ;
    toolset.flags tms320c2000.link LIBRARY_PATH_OPTION $(condition) : -i : unchecked ;
    toolset.flags tms320c2000.link LIBRARY_OPTION $(condition) : "" : unchecked ;
    toolset.flags tms320c2000.link RUN_PATH $(condition) : $(root)/bin ;

    toolset.flags tms320c2000.hex OPTIONS $(condition) : <flags> ;

    cpu-flags tms320c2000.compile OPTIONS : $(condition) : tms320c2000 : tms320c2000 : -v28 : default ;
    cpu-flags tms320c2000.compile OPTIONS : $(condition) : tms320c2000 : tms320c2800 : -v28 ;
  }
  else
  {
    ECHO "tms320c2000: warning: unsupported operating system" os.name ;
  }
}

# @todo put all these options in a variable or a response file.
actions compile.c
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo "$(<:S)" -ec "$(>:S)" -c $(OPTIONS) -D$(DEFINES) -U$(UNDEFINES) -I"$(STDHDRS:W)" -I"$(INCLUDES:W)" -fr "$(<:DW)" -fs "$(<:DW)" -ft "$(<:DW)" --pp_directory "$(<:DW)" "$(>:W)"
}

actions compile.c++
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo "$(<:S)" -ep "$(>:S)" -c $(OPTIONS) -D$(DEFINES) -U$(UNDEFINES) -I"$(STDHDRS:W)" -I"$(INCLUDES:W)" -fr "$(<:DW)" -fs "$(<:DW)" -ft "$(<:DW)" --pp_directory "$(<:DW)" "$(>:W)"
}

actions compile.asm
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo "$(<:S)" -ea "$(>:S)" -c $(OPTIONS) -D$(DEFINES) -U$(UNDEFINES) -I"$(STDHDRS:W)" -I"$(INCLUDES:W)" -fr "$(<:DW)" -fs "$(<:DW)" -ft "$(<:DW)" --pp_directory "$(<:DW)" "$(>:W)"
}

actions link
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -z -w $(OPTIONS) --define=$(DEFINES) --undefine=$(UNDEFINES) -i"$(LIBRARY_PATH:W)" -i"$(STDLIBPATH:W)" -o "$(<:W)" -m "$(<:S=.map)" "$(>:W)" -l"$(LIBRARIES:W)" -l"$(STDLIBRARIES:W)"
}

RM = [ common.rm-command ] ;
actions together piecemeal archive
{
  $(RM) "$(<)"
  "$(.bin)/ar2000" $(AROPTIONS) qrv "$(<:W)" "$(>:W)"
}

# Hex Converter
# @todo Hex should become a top-level target type
actions hex
{
  "$(.bin)/hex2000" -q $(OPTIONS) -o"$(<)" -map "$(<:S=.hex.map)" "$(>)"
}

local rule cpu-flags ( toolset variable : condition ? : architecture : instruction-set + : values * : default ? )
{
  if $(condition)
  {
    if $(default)
    {
      # architecture and instruction-set are not set
      toolset.flags $(toolset) $(variable) $(condition)/<architecture>/<instruction-set> : $(values) ;
      # instruction-set is not set
      toolset.flags $(toolset) $(variable) $(condition)/<architecture>$(architecture)/<instruction-set> : $(values) ;
    }
    toolset.flags $(toolset) $(variable) $(condition)/<architecture>/<instruction-set>$(instruction-set) <architecture>$(architecture)/<instruction-set>$(instruction-set) : $(values) ;
  }
  else
  {
    if $(default)
    {
      # architecture and instruction-set are not set
      toolset.flags $(toolset) $(variable) <architecture>/<instruction-set> : $(values) ;
      # instruction-set is not set
      toolset.flags $(toolset) $(variable) <architecture>$(architecture)/<instruction-set> : $(values) ;
    }
    toolset.flags $(toolset) $(variable) <architecture>/<instruction-set>$(instruction-set) <architecture>$(architecture)/<instruction-set>$(instruction-set) : $(values) ;
  }
}
