# Boost.Build support for the Texas Instruments TMS320C5400 Code Generation
# Tools.
#
# @todo add automatic library and runtime selection
# @todo add linker command file library
# @todo deal with dynamic linking
# @todo deal with multi-threaded?

import property ;
import generators ;
import os ;
import type ;
import toolset ;
import testing ;
import regex ;
import errors ;
import feature ;
import path ;
import common ;
import errors ;

import tms320_common ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
  .debug-configuration = true ;
}

feature.extend toolset : tms320c5400 ;

feature.extend architecture :
  tms320c5400
  ;

feature.extend instruction-set :
  tms320c5400
  tms320c541
  tms320c542
  tms320c543
  tms320c545
  tms320c545lp
  tms320c546lp
  tms320c548
  tms320c549
  ;

type.register H54 : h54 : H ;

type.register S54 : s54 : ASM ;

type.register O54 : o54 ;

type.register A54 : a54 l54 ;

type.set-generated-target-suffix EXE : <toolset>tms320c5400 : out ;
type.set-generated-target-suffix OBJ : <toolset>tms320c5400 : obj ;
type.set-generated-target-suffix STATIC_LIB : <toolset>tms320c5400 : lib ;

generators.register-linker tms320c5400.link : OBJ STATIC_LIB : EXE : <toolset>tms320c5400 <target-os>baremetal ;
#generators.register-linker tms320c5400.link : OBJ O54 A54 STATIC_LIB : EXE : <toolset>tms320c5400 <target-os>baremetal ;

generators.register-archiver tms320c5400.archive : OBJ : STATIC_LIB : <toolset>tms320c5400 <target-os>baremetal ;
#generators.register-archiver tms320c5400.archive : OBJ O54 : STATIC_LIB : <toolset>tms320c5400 <target-os>baremetal ;

generators.register-c-compiler tms320c5400.compile.c++ : CPP : OBJ : <toolset>tms320c5400 <target-os>baremetal ;
generators.register-c-compiler tms320c5400.compile.c : C : OBJ : <toolset>tms320c5400 <target-os>baremetal ;
generators.register-c-compiler tms320c5400.compile.asm : ASM : OBJ : <toolset>tms320c5400 <target-os>baremetal ;

local rule get-major-version ( version )
{
  return [ regex.match "^([0-9]+)\..*$" : $(version) ] ;
}

rule init ( version ? : command * : options * )
{
  # Check that the host operating system is supported.  If it is not,
  # continue without configuring so we can still build targets that do
  # not need this toolset.
  if [ os.name ] = NT || [ os.name ] = CYGWIN || [ os.name ] = LINUX
  {
    command = [ common.get-invocation-command tms320c5400 : cl500 : $(command) ] ;

    if $(command)
    {
      local output-lines = [ SPLIT_BY_CHARACTERS [ SHELL "\"$(command)\"" ] : "\n" ] ;

      local detected-version-components = [ MATCH "([0-9]+\\.[0-9]+(\\.[0-9]+)?)" : $(output-lines[1]) ] ;
      local detected-version = $(detected-version-components[1]) ;

      if ! $(detected-version)
      {
        errors.user-error "tms320c5400: no version detected" ;
      }

      if $(version)
      {
        if $(detected-version) != $(version)
        {
          errors.user-error "tms320c5400: detected version (" $(detected-version) ") does not match desired (" $(version) ")" ;
        }
      }

      if $(detected-version)
      {
        version = $(detected-version) ;
      }
    }
    else
    {
      errors.user-error "tms320c5400: cl500 not found at" $(command) ;
    }

    local major-version = [ get-major-version $(version) ] ;

    root = [ common.get-absolute-tool-path $(command[-1]) ] ;
    if $(major-version) >= 4
    {
      root = $(root:P) ;
    }

    local condition = [ common.check-init-parameters tms320c5400 : version $(version) ] ;

    common.handle-options tms320c5400 : $(condition) : $(command) : $(options) ;

    #toolset.add-requirements <toolset>tms320c5400:<testing.launcher>"$(root[0])/bin/load500.exe" ;
    toolset.add-requirements <toolset>tms320c5400:<testing.launcher>echo ;

    if $(.debug-configuration)
    {
      ECHO "tms320c5400: using compiler" $(version) "at" $(root) ;
    }

    if $(major-version) >= 4
    {
      toolset.flags tms320c5400 .bin $(condition) : $(root)/bin ;
    }
    else
    {
      toolset.flags tms320c5400 .bin $(condition) : $(root) ;
    }

    # Declare flags

    toolset.flags tms320c5400.link OPTIONS $(condition)/<strip>off : ;
    toolset.flags tms320c5400.link OPTIONS $(condition)/<strip>on : -s ;

    toolset.flags tms320c5400.compile OPTIONS $(condition)/<debug-symbols>off : ;
    toolset.flags tms320c5400.compile OPTIONS $(condition)/<debug-symbols>on : -g ;

    toolset.flags tms320c5400.compile OPTIONS $(condition)/<optimization>off : ;
    if $(major-version) < 4
    {
      toolset.flags tms320c5400.compile OPTIONS $(condition)/<optimization>speed : -o3 ;
    }
    else
    {
      toolset.flags tms320c5400.compile OPTIONS $(condition)/<optimization>speed : -O3 ;
    }
    toolset.flags tms320c5400.compile OPTIONS $(condition)/<optimization>space : -ms ;

    # @todo fill in completely
    # toolset.flags tms320c5400.compile OPTIONS $(condition)/<profiling>off : ;
    # toolset.flags tms320c5400.compile OPTIONS $(condition)/<profiling>on : ;

    if $(major-version) < 4
    {
      toolset.flags tms320c5400.compile OPTIONS $(condition)/<inlining>off : -x0 ;
      toolset.flags tms320c5400.compile OPTIONS $(condition)/<inlining>on : -x1 ;
      toolset.flags tms320c5400.compile OPTIONS $(condition)/<inlining>full : -x2 ;
    }
    else
    {
      toolset.flags tms320c5400.compile OPTIONS $(condition)/<inlining>off : -pi ;
      toolset.flags tms320c5400.compile OPTIONS $(condition)/<inlining>on : ;
      toolset.flags tms320c5400.compile OPTIONS $(condition)/<inlining>full : ;
    }

    if $(major-version) >= 4
    {
      toolset.flags tms320c5400.compile.c++ OPTIONS $(condition)/<rtti>off : ;
      toolset.flags tms320c5400.compile.c++ OPTIONS $(condition)/<rtti>on : -rtti ;
    }

    if $(major-version) >= 4
    {
      toolset.flags tms320c5400.compile.c++ OPTIONS $(condition)/<exception-handling>off : ;
      toolset.flags tms320c5400.compile.c++ OPTIONS $(condition)/<exception-handling>on : --exceptions ;
    }

    if $(major-version) >= 4
    {
      toolset.flags tms320c5400.compile OPTIONS $(condition)/<warnings>off : -pdw ;
    }
    toolset.flags tms320c5400.compile OPTIONS $(condition)/<warnings>all : ;

    toolset.flags tms320c5400.compile OPTIONS $(condition)/<warnings-as-errors>off : ;
    # @todo no option for this in this compiler
    toolset.flags tms320c5400.compile OPTIONS $(condition)/<warnings-as-errors>on : ;

    toolset.flags tms320c5400.link OPTIONS $(condition) : <linkflags> ;
    toolset.flags tms320c5400.archive AROPTIONS $(condition) : <archiveflags> ;
    toolset.flags tms320c5400.compile OPTIONS $(condition) : <compileflags> ;

    toolset.flags tms320c5400.compile.c OPTIONS $(condition) : <cflags> ;
    if $(major-version) >= 4
    {
      toolset.flags tms320c5400.compile.c++ OPTIONS $(condition) : <cxxflags> ;
    }
    toolset.flags tms320c5400.compile.asm OPTIONS $(condition) : <asmflags> ;

    if $(major-version) >= 4
    {
      toolset.flags tms320c5400.compile STDHDRS $(condition) : $(root)/include ;
    }
    else
    {
      toolset.flags tms320c5400.compile STDHDRS $(condition) : $(root) ;
    }
    toolset.flags tms320c5400.compile DEFINES $(condition) : <define> ;
    toolset.flags tms320c5400.compile UNDEFINES $(condition) : <undef> ;
    toolset.flags tms320c5400.compile INCLUDES $(condition) : <include> ;

    # @todo endianess left at default for now.
    toolset.flags tms320c5400.link DEFAULTS $(condition) : -qq ;
    toolset.flags tms320c5400.compile.c DEFAULTS $(condition) : -qq ;
    if $(major-version) >= 4
    {
      toolset.flags tms320c5400.compile.c++ DEFAULTS $(condition) : -qq --static_template_instantiation ;
    }
    toolset.flags tms320c5400.compile.asm DEFAULTS $(condition) : -qq ;

    toolset.flags tms320c5400.link DEFINES $(condition) : <define> ;
    toolset.flags tms320c5400.link UNDEFINES $(condition) : <undef> ;
    if $(major-version) >= 4
    {
      toolset.flags tms320c5400.link STDLIBPATH $(condition) : $(root)/lib ;
    }
    else
    {
      toolset.flags tms320c5400.link STDLIBPATH $(condition) : $(root) ;
    }
    toolset.flags tms320c5400.link LIBRARY_PATH $(condition) : <library-path> ;
    toolset.flags tms320c5400.link FINDLIBS_ST $(condition) : <find-static-library> ;
    toolset.flags tms320c5400.link FINDLIBS_SA $(condition) : <find-shared-library> ;
    toolset.flags tms320c5400.link LIBRARIES $(condition) : <library-file> ;
    if $(major-version) >= 4
    {
      toolset.flags tms320c5400.link LIBRARY_PATH_OPTION $(condition) : -i : unchecked ;
      toolset.flags tms320c5400.link LIBRARY_OPTION $(condition) : -l : unchecked ;
    }
    else
    {
      toolset.flags tms320c5400.link LIBRARY_PATH_OPTION $(condition) : "-i " : unchecked ;
      toolset.flags tms320c5400.link LIBRARY_OPTION $(condition) : "-l " : unchecked ;
    }
    if $(major-version) >= 4
    {
      toolset.flags tms320c5400.link RUN_PATH $(condition) : $(root)/bin ;
    }
    else
    {
      toolset.flags tms320c5400.link RUN_PATH $(condition) : $(root) ;
    }

    if $(major-version) < 4
    {
      toolset.flags tms320c5400.link STDLIBRARIES $(condition) : rts.lib ;
      #toolset.flags tms320c5400.link STDLIBRARIES $(condition) : rts_ext.lib ;
    }
    else
    {
      toolset.flags tms320c5400.link STDLIBRARIES $(condition) : libc.a ;
    }

    toolset.flags tms320c5400.hex OPTIONS $(condition) : <flags> ;
    toolset.flags tms320c5400.hex OFLAG $(condition) : "-o " ;

    cpu-flags tms320c5400.compile OPTIONS : $(condition) : tms320c5400 : tms320c5400 : : default ;
    cpu-flags tms320c5400.compile OPTIONS : $(condition) : tms320c5400 : tms320c541 : -v541 ;
    cpu-flags tms320c5400.compile OPTIONS : $(condition) : tms320c5400 : tms320c542 : -v542 ;
    cpu-flags tms320c5400.compile OPTIONS : $(condition) : tms320c5400 : tms320c543 : -v543 ;
    cpu-flags tms320c5400.compile OPTIONS : $(condition) : tms320c5400 : tms320c545 : -v545 ;
    cpu-flags tms320c5400.compile OPTIONS : $(condition) : tms320c5400 : tms320c545lp : -v545lp ;
    cpu-flags tms320c5400.compile OPTIONS : $(condition) : tms320c5400 : tms320c546lp : -v546lp ;
    cpu-flags tms320c5400.compile OPTIONS : $(condition) : tms320c5400 : tms320c548 : -v548 ;
    cpu-flags tms320c5400.compile OPTIONS : $(condition) : tms320c5400 : tms320c549 : -v549 ;
  }
  else
  {
    ECHO "tms320c5400: warning: unsupported operating system" os.name ;
  }
}

# @todo put all these options in a variable or a response file.
rule compile.c ( target : sources + : properties * )
{
  local version = [ feature.get-values <toolset-tms320c5400:version> : $(properties) ] ;
  local major-version = [ get-major-version $(version) ] ;

  if $(major-version) < 4
  {
    compile.c.3 $(target) : $(sources) : $(properties) ;
  }
  else
  {
    compile.c.4 $(target) : $(sources) : $(properties) ;
  }
}

actions compile.c.3
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo $(<:S) -c $(OPTIONS) -d$(DEFINES) -u$(UNDEFINES) -i$(STDHDRS:W) -i$(INCLUDES:W) -fr "$(<:DW)" -fs "$(<:DW)" -ft "$(<:DW)" "$(>:W)"
}

actions compile.c.4
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo $(<:S) -ec $(>:S) -c $(OPTIONS) -D$(DEFINES) -U$(UNDEFINES) -I"$(STDHDRS:W)" -I"$(INCLUDES:W)" -fr "$(<:DW)" -fs "$(<:DW)" -ft "$(<:DW)" "$(>:W)"
}

rule compile.c++ ( target : sources + : properties * )
{
  local version = [ feature.get-values <toolset-tms320c5400:version> : $(properties) ] ;
  local major-version = [ get-major-version $(version) ] ;

  if $(major-version) < 4
  {
    compile.c++.3 $(target) : $(sources) : $(properties) ;
  }
  else
  {
    compile.c++.4 $(target) : $(sources) : $(properties) ;
  }
}

actions compile.c++.3
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo $(<:S) -c $(OPTIONS) -d$(DEFINES) -u$(UNDEFINES) -i$(STDHDRS:W) -i$(INCLUDES:W) -fr "$(<:DW)" -fs "$(<:DW)" -ft "$(<:DW)" "$(>:W)"
}

actions compile.c++.4
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo $(<:S) -ep $(>:S) -c $(OPTIONS) -D$(DEFINES) -U$(UNDEFINES) -I"$(STDHDRS:W)" -I"$(INCLUDES:W)" -fr "$(<:DW)" -fs "$(<:DW)" -ft "$(<:DW)" "$(>:W)"
}

rule compile.asm ( target : sources + : properties * )
{
  local version = [ feature.get-values <toolset-tms320c5400:version> : $(properties) ] ;
  local major-version = [ get-major-version $(version) ] ;

  if $(major-version) < 4
  {
    compile.asm.3 $(target) : $(sources) : $(properties) ;
  }
  else
  {
    compile.asm.4 $(target) : $(sources) : $(properties) ;
  }
}

actions compile.asm.3
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo $(<:S) -c $(OPTIONS) -ad$(DEFINES) -au$(UNDEFINES) -i$(STDHDRS:W) -i$(INCLUDES:W) -fr "$(<:DW)" -fs "$(<:DW)" -ft "$(<:DW)" "$(>:W)"
}

actions compile.asm.4
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo $(<:S) -ea $(>:S) -c $(OPTIONS) -D$(DEFINES) -U$(UNDEFINES) -I"$(STDHDRS:W)" -I"$(INCLUDES:W)" -fr "$(<:DW)" -fs "$(<:DW)" -ft "$(<:DW)" "$(>:W)"
}

rule link ( target : sources + : properties * )
{
  local version = [ feature.get-values <toolset-tms320c5400:version> : $(properties) ] ;
  local major-version = [ get-major-version $(version) ] ;

  if $(major-version) < 4
  {
    link.3 $(target) : $(sources) : $(properties) ;
  }
  else
  {
    link.4 $(target) : $(sources) : $(properties) ;
  }
}

actions link.3
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -d$(DEFINES) -u$(UNDEFINES) -z -w $(OPTIONS) $(LIBRARY_PATH_OPTION)$(LIBRARY_PATH:W) $(LIBRARY_PATH_OPTION)$(STDLIBPATH:W) -o "$(<:W)" -m "$(<:S=.map)" "$(>:W)" $(LIBRARY_OPTION)$(LIBRARIES:W) $(LIBRARY_OPTION)$(STDLIBRARIES:W)
}

actions link.4
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -z -w $(OPTIONS) --define=$(DEFINES) --undefine=$(UNDEFINES) $(LIBRARY_PATH_OPTION)"$(LIBRARY_PATH:W)" $(LIBRARY_PATH_OPTION)"$(STDLIBPATH:W)" -o "$(<:W)" -m "$(<:S=.map)" "$(>:W)" $(LIBRARY_OPTION)"$(LIBRARIES:W)" $(LIBRARY_OPTION)"$(STDLIBRARIES:W)"
}

RM = [ common.rm-command ] ;
actions together piecemeal archive
{
  $(RM) "$(<)"
  "$(.bin)/ar500" $(AROPTIONS) qrv "$(<:W)" "$(>:W)"
}

# Hex Converter
# @todo Hex should become a top-level target type
actions hex
{
  "$(.bin)/hex500" -q $(OPTIONS) $(OFLAG)"$(<)" -map "$(<[1]:S=.hex.map)" "$(>)"
}

local rule cpu-flags ( toolset variable : condition ? : architecture : instruction-set + : values * : default ? )
{
  if $(condition)
  {
    if $(default)
    {
      # architecture and instruction-set are not set
      toolset.flags $(toolset) $(variable) $(condition)/<architecture>/<instruction-set> : $(values) ;
      # instruction-set is not set
      toolset.flags $(toolset) $(variable) $(condition)/<architecture>$(architecture)/<instruction-set> : $(values) ;
    }
    toolset.flags $(toolset) $(variable) $(condition)/<architecture>/<instruction-set>$(instruction-set) <architecture>$(architecture)/<instruction-set>$(instruction-set) : $(values) ;
  }
  else
  {
    if $(default)
    {
      # architecture and instruction-set are not set
      toolset.flags $(toolset) $(variable) <architecture>/<instruction-set> : $(values) ;
      # instruction-set is not set
      toolset.flags $(toolset) $(variable) <architecture>$(architecture)/<instruction-set> : $(values) ;
    }
    toolset.flags $(toolset) $(variable) <architecture>/<instruction-set>$(instruction-set) <architecture>$(architecture)/<instruction-set>$(instruction-set) : $(values) ;
  }
}
