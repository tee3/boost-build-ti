# Boost.Build support for the Texas Instruments TMS320C6000 Code Generation
# Tools.
#
# @todo add automatic library and runtime selection
# @todo add linker command file library
# @todo deal with dynamic linking
# @todo deal with multi-threaded?

import property ;
import generators ;
import os ;
import type ;
import toolset ;
import errors ;
import feature ;
import path ;
import common ;
import errors ;

import tms320_common ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
  .debug-configuration = true ;
}

feature.extend toolset : tms320c6000 ;

rule init ( version ? : command * : options * )
{
  # Check that the host operating system is supported.  If it is not,
  # continue without configuring so we can still build targets that do
  # not need this toolset.
  if [ os.name ] = NT || [ os.name ] = CYGWIN || [ os.name ] = LINUX || [ os.name ] = MACOSX
  {
    command = [ common.get-invocation-command tms320c6000 : cl6x : $(command) ] ;

    root = ;
    if $(command)
    {
      root = [ common.get-absolute-tool-path $(command[-1]) ] ;
      root = $(root:P) ;

      version ?= [ MATCH "^([0-9.]+)" : [ SHELL \""$(command)\" --compiler_revision" ] ] ;
      if $(version)
      {
        local actual_version = [ MATCH "^([0-9.]+)" : [ SHELL \""$(command)\" --compiler_revision" ] ] ;
        if $(actual_version) != $(version)
        {
          errors.user-error "tms320c6000: detected version $(actual_version) does not match desired $(version)" ;
        }
      }
    }
    else
    {
      errors.user-error "tms320c6000: cl6x not found" ;
    }

    local condition = [ common.check-init-parameters tms320c6000 : version $(version) ] ;

    common.handle-options tms320c6000 : $(condition) : $(command) : $(options) ;

    # @todo this seems to be the right way, but this is a list somehow
#    toolset.add-requirements <toolset>tms320c6000:<testing.launcher>"$(root[0])/bin/load6xexe" ;

    if $(.debug-configuration)
    {
      ECHO "tms320c6000: using compiler" $(version) "at" $(root) ;
    }

    toolset.flags tms320c6000.compile STDHDRS $(condition) : $(root)/include ;
    toolset.flags tms320c6000.link STDLIBPATH $(condition) : $(root)/lib ;
    toolset.flags tms320c6000.link RUN_PATH $(condition) : $(root)/bin ;
    toolset.flags tms320c6000 .root $(condition) : $(root)/bin/ ;
  }
  else
  {
    ECHO "tms320c6000: warning: unsupported operating system" os.name ;
  }
}

type.register H62 : h62 : H ;
type.register H64 : h64 : H ;
type.register H67 : h67 : H ;

type.register S62 : s62 : ASM ;
type.register S64 : s64 : ASM ;
type.register S67 : s67 : ASM ;

type.register O62 : o62 ;
type.register O64 : o64 ;
type.register O64P : o64P ;
type.register O67 : o67 ;
type.register O67P : o67P ;

type.register A62 : a62 l62 ;
type.register A64 : a64 l64 ;
type.register A64P : a64p a64P l64p l64P ;
type.register A67 : a67 l67 ;
type.register A67P : a67p a67P l67p l67P ;

type.set-generated-target-suffix EXE : <toolset>tms320c6000 : out ;
type.set-generated-target-suffix OBJ : <toolset>tms320c6000 : obj ;
type.set-generated-target-suffix STATIC_LIB : <toolset>tms320c6000 : lib ;

generators.register-linker tms320c6000.link : OBJ O62 A62 STATIC_LIB : EXE : <toolset>tms320c6000 ;
generators.register-linker tms320c6000.link : OBJ O62 O64 O64P A62 A64 STATIC_LIB : EXE : <toolset>tms320c6000 <architecture>tms320c6000 <instruction-set>tms320c6400 ;
generators.register-linker tms320c6000.link : OBJ O62 O64 O64P A62 A64 A64P STATIC_LIB : EXE : <toolset>tms320c6000 <architecture>tms320c6000 <instruction-set>tms320c64x+ ;
generators.register-linker tms320c6000.link : OBJ O62 O67 O67P A62 A67 STATIC_LIB : EXE : <toolset>tms320c6000 <architecture>tms320c6000 <instruction-set>tms320c6700 ;
generators.register-linker tms320c6000.link : OBJ O62 O67 O67P A62 A67 STATIC_LIB : EXE : <toolset>tms320c6000 <architecture>tms320c6000 <instruction-set>tms320c6713 ;
generators.register-linker tms320c6000.link : OBJ O62 O67 O67P A62 A67 A67P STATIC_LIB : EXE : <toolset>tms320c6000 <architecture>tms320c6000 <instruction-set>tms320c67x+ ;

generators.register-archiver tms320c6000.archive : OBJ O62 : STATIC_LIB : <toolset>tms320c6000 ;
generators.register-archiver tms320c6000.archive : OBJ O62 O64 : STATIC_LIB : <toolset>tms320c6000 <architecture>tms320c6000 <instruction-set>tms320c6400 ;
generators.register-archiver tms320c6000.archive : OBJ O62 O64 O64P : STATIC_LIB : <toolset>tms320c6000 <architecture>tms320c6000 <instruction-set>tms320c64x+ ;
generators.register-archiver tms320c6000.archive : OBJ O62 O67 : STATIC_LIB : <toolset>tms320c6000 <architecture>tms320c6000 <instruction-set>tms320c6700 ;
generators.register-archiver tms320c6000.archive : OBJ O62 O67 O67P : STATIC_LIB : <toolset>tms320c6000 <architecture>tms320c6000 <instruction-set>tms320c67x+ ;

generators.register-c-compiler tms320c6000.compile.c++ : CPP : OBJ : <toolset>tms320c6000 ;
generators.register-c-compiler tms320c6000.compile.c : C : OBJ : <toolset>tms320c6000 ;
generators.register-c-compiler tms320c6000.compile.asm : ASM : OBJ : <toolset>tms320c6000 ;

# Declare flags

# Compiler

toolset.flags tms320c6000.compile OPTIONS <debug-symbols>off : ;
toolset.flags tms320c6000.compile OPTIONS <debug-symbols>on : -g ;

toolset.flags tms320c6000.compile OPTIONS <optimization>off : ;
toolset.flags tms320c6000.compile OPTIONS <optimization>speed : -O3 ;
toolset.flags tms320c6000.compile OPTIONS <optimization>space : -ms=3 ;

# @todo fill in completely
# toolset.flags tms320c6000.compile OPTIONS <profiling>off : ;
# toolset.flags tms320c6000.compile OPTIONS <profiling>on : ;

toolset.flags tms320c6000.compile OPTIONS <inlining>off : -pi ;
toolset.flags tms320c6000.compile OPTIONS <inlining>on : ;
toolset.flags tms320c6000.compile OPTIONS <inlining>full : ;

toolset.flags tms320c6000.compile.c++ OPTIONS <rtti>off : ;
toolset.flags tms320c6000.compile.c++ OPTIONS <rtti>on : -rtti ;

toolset.flags tms320c6000.compile.c++ OPTIONS <exception-handling>off : ;
toolset.flags tms320c6000.compile.c++ OPTIONS <exception-handling>on : --exceptions ;

toolset.flags tms320c6000.compile OPTIONS <warnings>off : -pdw ;
toolset.flags tms320c6000.compile OPTIONS <warnings>all : ;
toolset.flags tms320c6000.compile OPTIONS <warnings-as-errors>on : -ps ;

toolset.flags tms320c6000.compile OPTIONS <compileflags> ;

toolset.flags tms320c6000.compile.c OPTIONS <cflags> ;
toolset.flags tms320c6000.compile.c++ OPTIONS <cxxflags> ;
toolset.flags tms320c6000.compile.asm OPTIONS <asmflags> ;
toolset.flags tms320c6000.compile DEFINES <define> ;
toolset.flags tms320c6000.compile INCLUDES <include> ;

#toolset.flags tms320c6000.compile.c DEFAULTS : -qq -pc ;
toolset.flags tms320c6000.compile.c DEFAULTS : -qq ;
#toolset.flags tms320c6000.compile.c++ DEFAULTS : -qq -pc --static_template_instantiation ;
toolset.flags tms320c6000.compile.c++ DEFAULTS : -qq --static_template_instantiation ;
toolset.flags tms320c6000.compile.asm DEFAULTS : -qq ;

# @todo put all these options in a variable or a response file.
actions compile.c
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo "$(<:S)" -ec "$(>:S)" -c $(OPTIONS) -D"$(DEFINES)" -I"$(STDHDRS:W)" -I"$(INCLUDES:W)" -fr="$(<:DW)" -fs="$(<:DW)" "$(>:W)"
}

actions compile.c++
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo "$(<:S)" -fg -ep "$(>:S)" -c $(OPTIONS) -D"$(DEFINES)" -I"$(STDHDRS:W)" -I"$(INCLUDES:W)" -fr="$(<:DW)" -fs="$(<:DW)" "$(>:W)"
}

actions compile.asm
{
  "$(CONFIG_COMMAND)" $(DEFAULTS) -eo "$(<:S)" -ea "$(>:S)" -c $(OPTIONS) -D"$(DEFINES)" -I"$(STDHDRS:W)" -I"$(INCLUDES:W)" -fr="$(<:DW)" -fs="$(<:DW)" "$(>:W)"
}

# Linker
# @todo endianess left at default for now.
toolset.flags tms320c6000.link DEFAULTS : -qq -w ;

toolset.flags tms320c6000.link LIBRARY_PATH <library-path> ;
toolset.flags tms320c6000.link FINDLIBS_ST <find-static-library> ;
toolset.flags tms320c6000.link FINDLIBS_SA <find-shared-library> ;
toolset.flags tms320c6000.link LIBRARIES <library-file> ;

toolset.flags tms320c6000.link OPTIONS <linkflags> ;

toolset.flags tms320c6000.link LIBRARY_PATH_OPTION  : -i : unchecked ;
toolset.flags tms320c6000.link LIBRARY_OPTION  : "" : unchecked ;

actions link
{
  "$(.root)lnk6x" $(DEFAULTS) $(OPTIONS) -i"$(LIBRARY_PATH:W)" -i"$(STDLIBPATH:W)" -o "$(<:W)" -m "$(<:S=.map)" "$(>:W)" -l"$(LIBRARIES:W)" -l"$(STDLIBRARIES:W)"
}

# Archiver
toolset.flags tms320c6000.archive AROPTIONS <archiveflags> ;

RM = [ common.rm-command ] ;
actions together piecemeal archive
{
  $(RM) "$(<)"
  "$(.root)ar6x" $(AROPTIONS) qrv "$(<:W)" "$(>:W)"
}

# Hex Converter
# @todo Hex should become a top-level target type
actions hex
{
  "$(.root)hex6x" -q -byte -o $(<) -map $(<:S=.hex.map) $(>)
}

# Strip
# @todo strip should become a top-level target type
actions strip
{
  $(RM) "$(<)"
  "$(.root)strip6x" -p -o $(<) $(>)
}

# Support for additional architectures

feature.extend architecture :
  tms320c6000
  ;

feature.extend instruction-set :
  tms320c6000
  tms320c6200
  tms320c6400
  tms320c64x+
  tms320c6700
  tms320c6713
  tms320c67x+
  ;

local rule cpu-flags ( toolset variable * : architecture : instruction-set + : values + : default ? )
{
  if $(default)
  {
    # architecture and instruction-set are not set
    toolset.flags $(toolset) $(variable) <architecture>/<instruction-set> : $(values) ;
    # instruction-set is not set
    toolset.flags $(toolset) $(variable) <architecture>$(architecture)/<instruction-set> : $(values) ;
  }
  toolset.flags $(toolset) $(variable) <architecture>/<instruction-set>$(instruction-set) <architecture>$(architecture)/<instruction-set>$(instruction-set) : $(values) ;
}

cpu-flags tms320c6000.compile OPTIONS : tms320c6000 : tms320c6000 : -mv6200  : default ;
cpu-flags tms320c6000.compile OPTIONS : tms320c6000 : tms320c6200 : -mv6200  ;
cpu-flags tms320c6000.compile OPTIONS : tms320c6000 : tms320c6400 : -mv6400  ;
cpu-flags tms320c6000.compile OPTIONS : tms320c6000 : tms320c64x+ : -mv6400+ ;
cpu-flags tms320c6000.compile OPTIONS : tms320c6000 : tms320c6700 : -mv6700  ;
cpu-flags tms320c6000.compile OPTIONS : tms320c6000 : tms320c6713 : -mv6713  ;
cpu-flags tms320c6000.compile OPTIONS : tms320c6000 : tms320c67x+ : -mv6700+ ;

# enables auto-linking
toolset.flags tms320c6000.link STDLIBRARIES : libc.a ;
